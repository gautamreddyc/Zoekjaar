@using Zoekjaar.Web.Models
@using Zoekjaar.Web.Extensions
@model GraduateProfileModel

<div class="body">
	<div class="container">
		<div class="row-fluid margin-bottom-10">
			@using (Html.BeginForm("EditProfile", "Graduate", FormMethod.Post, new { @class = "reg-page-large" }))
   { 
				@Html.HiddenFor(_ => _.Graduate.Id)
				@Html.HiddenFor(_ => _.Graduate.UserId)
				@Html.HiddenFor(_ => _.Graduate.IsActive)
				<div class="controls">
					<div class="span6">
						@Html.LabelFor(_ => _.Graduate.FirstName)
						@Html.TextBoxFor(_ => _.Graduate.FirstName, new { @class = "span12" })
					</div>
					<div class="span6">
						@Html.LabelFor(_ => _.Graduate.LastName)
						@Html.TextBoxFor(_ => _.Graduate.LastName, new { @class = "span12" })
					</div>
				</div>
				<div class="controls">
					<div class="span6">
						@Html.LabelFor(_ => _.Graduate.CurrentStatusId)
						@Html.DropDownListFor(_ => _.Graduate.CurrentStatusId, new SelectList(Model.CurrentStatus, "Id", "Name"), new { @class = "span12" })
					</div>
					<div class="span6">
						@Html.LabelFor(_ => _.Graduate.VisaStatusId)
						@Html.DropDownListFor(_ => _.Graduate.VisaStatusId, new SelectList(Model.VisaStatus, "Id", "Name"), new { @class = "span12" })
					</div>
				</div>
				<div class="controls">
					<div class="span12">
						@Html.LabelFor(_ => _.Graduate.AvailableFromDate)
						@Html.TextBoxFor(_ => _.Graduate.AvailableFromDate, new { @class = "date-picker span6" })
					</div>
				</div>
				<div class="controls">
					<div class="span12">
						@Html.LabelFor(_ => _.Graduate.Profile)
						<div class="btn-toolbar" data-role="editor-toolbar" data-target="#editor">
							<div class="btn-group">
								<a class="btn dropdown-toggle" data-toggle="dropdown" title="" data-original-title="Font"><i class="icon-font"></i><b class="caret"></b></a>
								<ul class="dropdown-menu">
									<li><a data-edit="fontName Serif" style="font-family: 'Serif'">Serif</a></li>
									<li><a data-edit="fontName Sans" style="font-family: 'Sans'">Sans</a></li>
									<li><a data-edit="fontName Arial" style="font-family: 'Arial'">Arial</a></li>
									<li><a data-edit="fontName Arial Black" style="font-family: 'Arial Black'">Arial Black</a></li>
									<li><a data-edit="fontName Courier" style="font-family: 'Courier'">Courier</a></li>
									<li><a data-edit="fontName Courier New" style="font-family: 'Courier New'">Courier New</a></li>
									<li><a data-edit="fontName Comic Sans MS" style="font-family: 'Comic Sans MS'">Comic Sans MS</a></li>
									<li><a data-edit="fontName Helvetica" style="font-family: 'Helvetica'">Helvetica</a></li>
									<li><a data-edit="fontName Impact" style="font-family: 'Impact'">Impact</a></li>
									<li><a data-edit="fontName Lucida Grande" style="font-family: 'Lucida Grande'">Lucida Grande</a></li>
									<li><a data-edit="fontName Lucida Sans" style="font-family: 'Lucida Sans'">Lucida Sans</a></li>
									<li><a data-edit="fontName Tahoma" style="font-family: 'Tahoma'">Tahoma</a></li>
									<li><a data-edit="fontName Times" style="font-family: 'Times'">Times</a></li>
									<li><a data-edit="fontName Times New Roman" style="font-family: 'Times New Roman'">Times New Roman</a></li>
									<li><a data-edit="fontName Verdana" style="font-family: 'Verdana'">Verdana</a></li>
								</ul>
							</div>
							<div class="btn-group">
								<a class="btn dropdown-toggle" data-toggle="dropdown" title="" data-original-title="Font Size"><i class="icon-text-height"></i>&nbsp;<b class="caret"></b></a>
								<ul class="dropdown-menu">
									<li><a data-edit="fontSize 5"><font size="5">Huge</font></a></li>
									<li><a data-edit="fontSize 3"><font size="3">Normal</font></a></li>
									<li><a data-edit="fontSize 1"><font size="1">Small</font></a></li>
								</ul>
							</div>
							<div class="btn-group">
								<a class="btn" data-edit="bold" title="" data-original-title="Bold (Ctrl/Cmd+B)"><i class="icon-bold"></i></a>
								<a class="btn" data-edit="italic" title="" data-original-title="Italic (Ctrl/Cmd+I)"><i class="icon-italic"></i></a>
								<a class="btn" data-edit="strikethrough" title="" data-original-title="Strikethrough"><i class="icon-strikethrough"></i></a>
								<a class="btn" data-edit="underline" title="" data-original-title="Underline (Ctrl/Cmd+U)"><i class="icon-underline"></i></a>
							</div>
							<div class="btn-group">
								<a class="btn" data-edit="insertunorderedlist" title="" data-original-title="Bullet list"><i class="icon-list-ul"></i></a>
								<a class="btn" data-edit="insertorderedlist" title="" data-original-title="Number list"><i class="icon-list-ol"></i></a>
								<a class="btn" data-edit="outdent" title="" data-original-title="Reduce indent (Shift+Tab)"><i class="icon-indent-left"></i></a>
								<a class="btn" data-edit="indent" title="" data-original-title="Indent (Tab)"><i class="icon-indent-right"></i></a>
							</div>
							<div class="btn-group">
								<a class="btn" data-edit="justifyleft" title="" data-original-title="Align Left (Ctrl/Cmd+L)"><i class="icon-align-left"></i></a>
								<a class="btn" data-edit="justifycenter" title="" data-original-title="Center (Ctrl/Cmd+E)"><i class="icon-align-center"></i></a>
								<a class="btn" data-edit="justifyright" title="" data-original-title="Align Right (Ctrl/Cmd+R)"><i class="icon-align-right"></i></a>
								<a class="btn" data-edit="justifyfull" title="" data-original-title="Justify (Ctrl/Cmd+J)"><i class="icon-align-justify"></i></a>
							</div>
							<div class="btn-group">
								<a class="btn dropdown-toggle" data-toggle="dropdown" title="" data-original-title="Hyperlink"><i class="icon-link"></i></a>
								<div class="dropdown-menu input-append">
									<input class="span2" placeholder="URL" type="text" data-edit="createLink">
									<button class="btn" type="button">Add</button>
								</div>
								<a class="btn" data-edit="unlink" title="" data-original-title="Remove Hyperlink"><i class="icon-cut"></i></a>

							</div>

							<div class="btn-group">
								<a class="btn" title="" id="pictureBtn" data-original-title="Insert picture (or just drag &amp; drop)"><i class="icon-picture"></i></a>
								<input type="file" data-role="magic-overlay" data-target="#pictureBtn" data-edit="insertImage" style="opacity: 0; position: absolute; top: 0px; left: 0px; width: 41px; height: 30px;">
							</div>
							<div class="btn-group">
								<a class="btn" data-edit="undo" title="" data-original-title="Undo (Ctrl/Cmd+Z)"><i class="icon-undo"></i></a>
								<a class="btn" data-edit="redo" title="" data-original-title="Redo (Ctrl/Cmd+Y)"><i class="icon-repeat"></i></a>
							</div>
							<div class="btn-group pull-right">
								<input type="text" data-edit="inserttext" id="voiceBtn" x-webkit-speech="">
							</div>
						</div>
						<div id="editor" contenteditable="true" class="wysiwyg-editor">Give it a shot.</div>
					</div>
				</div>
				
	   		@*<div class="accordion" id="accordion">
					<div class="accordion-group">
						<div class="accordion-heading">
							<a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion" href="#degree-accordion">Degrees
							</a>
						</div>
						<div id="degree-accordion" class="accordion-body collapse in">
							<div class="accordion-inner">
								<div class="row-fluid">
									<div class="span6">
										<button class="btn btn-inverse btn-mini command save" data-group="degree" data-target="degrees" data-container="add-degree-container">Save</button>
										<button class="btn btn-inverse btn-mini command save-and-add" data-group="degree" data-target="degrees" data-container="add-degree-container">Save & Add another degree</button>
										<button class="btn btn-inverse btn-mini command add" data-group="degree" data-target="degrees" data-container="add-degree-container">Add another degree</button>
									</div>
								</div>
								<div id="add-degree-container">
									<div class="row-fluid">
										<div class="span3">
											<div class="control-group">
												@Html.LabelFor(_ => _.Degree.University)
												<div class="controls">
													<input type="text" class="element" data-name="Graduate.GraduateDegrees[{0}].University" />
												</div>
											</div>
										</div>
										<div class="span3">
											<div class="control-group">
												@Html.LabelFor(_ => _.Degree.Degree)
												<div class="controls">
													<input type="text" class="element" data-name="Graduate.GraduateDegrees[{0}].Degree" />
												</div>
											</div>
										</div>
									</div>
									<div class="row-fluid">
										<div class="span3">
											<div class="control-group">
												@Html.LabelFor(_ => _.Degree.Specialisation)
												<div class="controls">
													<input type="text" class="element" data-name="Graduate.GraduateDegrees[{0}].Specialisation" />
												</div>
											</div>
										</div>
									</div>
								</div>
								<hr />
								<div id="degrees">
									@{
	   var i = 0;
	   foreach (var degree in Model.Graduate.GraduateDegrees)
	   {
		   var university = string.Format("Graduate.GraduateDegrees[{0}].University", i);
		   var d = string.Format("Graduate.GraduateDegrees[{0}].Degree", i);
		   var specialisation = string.Format("Graduate.GraduateDegrees[{0}].Specialisation", i);
		   var id = string.Format("Graduate.GraduateDegrees[{0}].Id", i);
		   var graduateId = string.Format("Graduate.GraduateDegrees[{0}].GraduateId", i);
										@Html.Hidden(id, degree.Id)
										@Html.Hidden(graduateId, degree.GraduateId)
										<div class="row-fluid">
											<div class="span3">
												<div class="control-group">
													@Html.Label(university, "University/College", new { @class = "control-label" })
													<div class="controls">
														<input readonly="readonly" type="text" class="element" name="@university" value="@degree.University" />
													</div>
												</div>
											</div>
											<div class="span3">
												<div class="control-group">
													@Html.Label(d, "Degree Obtained", new { @class = "control-label" })
													<div class="controls">
														<input readonly="readonly" type="text" class="element" name="@d" value="@degree.Degree" />
													</div>
												</div>
											</div>
										</div>
										<div class="row-fluid">
											<div class="span3">
												<div class="control-group">
													@Html.Label(specialisation, "Specialisation", new { @class = "control-label" })
													<div class="controls">
														<input readonly="readonly" type="text" class="element" name="@specialisation" value="@degree.Specialisation" />
													</div>
												</div>
											</div>
										</div>
		   i++;
	   }
									}
								</div>
							</div>
						</div>
					</div>

					<div class="accordion-group">
						<div class="accordion-heading">
							<a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion" href="#language-accordion">Languages
							</a>
						</div>
						<div id="language-accordion" class="accordion-body collapse">
							<div class="accordion-inner">
								<div id="add-language-container">
									<div class="row-fluid">
										<div class="span3">
											<div class="control-group">
												@Html.LabelFor(_ => _.Language.Language)
												<div class="controls">
													<input type="text" class="element" data-name="Graduate.GraduateLanguages[{0}].Language" />
												</div>
											</div>
										</div>
										<div class="span3">
											<div class="control-group">
												@Html.LabelFor(_ => _.Language.Proficiency)
												<div class="controls">
													@Html.DropDownList("languages-dropdown", new SelectList(Model.Proficiencies, "Id", "Name"), new { @class = "element", dataname = "Graduate.GraduateLanguages[{0}].ProficiencyId" })
												</div>
											</div>
										</div>
									</div>
								</div>
								<div class="row-fluid">
									<div class="span3">
										<button class="btn btn-inverse btn-mini command save" data-group="language" data-target="languages" data-container="add-language-container">Save</button>
										<button class="btn btn-inverse btn-mini command save-and-add" data-group="language" data-target="languages" data-container="add-language-container">Save & Add another Language</button>
									</div>
								</div>
								<div id="languages">
									@{
	   i = 0;
	   foreach (var language in Model.Graduate.GraduateLanguages)
	   {
										<div class="container-fluid">
											<div class="row-fluid">
												<div class="span3">
													<div class="control-group">
														@Html.Label("Language", new { @class = "control-label" })
														<div class="controls">
															<input type="text" readonly="readonly" class="element" name="Graduate.GraduateLanguages[@i].Language" value="@language.Language" />
														</div>
													</div>
												</div>
												<div class="span3">
													<div class="control-group">
														@Html.Label("Profiency", new { @class = "control-label" })
														<div class="controls">
															<input type="text" class="element" name="Graduate.GraduateLanguages[@i].ProficiencyId" value="@language.ProficiencyId" />
														</div>
													</div>
												</div>
											</div>
										</div>
		   i++;
	   }
									}
								</div>
								<div class="row-fluid">
									<button id="add-language" class="btn btn-inverse btn-mini command add" data-group="language" data-target="languages" data-container="add-language-container">Add another Language</button>
								</div>
								<div class="row-fluid">
									<div class="control-group">
										@Html.LabelFor(_ => _.Graduate.PcSkills)
										<div class="controls">
											@Html.TextAreaFor(_ => _.Graduate.PcSkills, new { row = 3, @class = "input-xxlarge" })
										</div>
									</div>
								</div>
								<div class="row-fluid">
									<div class="control-group">
										@Html.LabelFor(_ => _.Graduate.OtherSkills)
										<div class="controls">
											@Html.TextAreaFor(_ => _.Graduate.OtherSkills, new { row = 3, @class = "input-xxlarge" })
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
					<div class="accordion-group">
						<div class="accordion-heading">
							<a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion" href="#experience-accordion">Experiences
							</a>
						</div>
						<div id="experience-accordion" class="accordion-body collapse">
							<div class="accordion-inner">
								<div id="add-experience-container">
									<div class="row-fluid">
										<div class="control-group">
											@Html.LabelFor(_ => _.Experience.CompanyName)
											<div class="controls">
												<input type="text" class="element span5" data-name="Graduate.GraduateExperiences[{0}].CompanyName" />
											</div>
										</div>
									</div>
									<div class="row-fluid">
										<div class="control-group">
											@Html.LabelFor(_ => _.Experience.CompanyProfile)
											<div class="controls">
												<input type="text" class="element span5" data-name="Graduate.GraduateExperiences[{0}].CompanyProfile" />
											</div>
										</div>
									</div>
									<div class="row-fluid">
										<div class="control-group">
											@Html.LabelFor(_ => _.Experience.Experience)
											<div class="controls">
												<textarea id="experience-textarea" rows="3" class="element input-xxlarge" data-name="Graduate.GraduateExperiences[{0}].Experience"></textarea>
											</div>
										</div>
									</div>
								</div>
								<div class="row-fluid">
									<div class="span3">
										<button class="btn btn-inverse btn-mini command save" data-group="experience" data-target="experiences" data-container="add-experience-container" href="#">Save</button>
										<button class="btn btn-inverse btn-mini command save-and-add" data-group="experience" data-target="experiences" data-container="add-experience-container" href="#">Save & Add another experience</button>
									</div>
								</div>
								<div id="experiences">
									@{
	   i = 0;
	   foreach (var experience in Model.Graduate.GraduateExperiences)
	   {
										<div class="row-fluid">
											<div class="control-group">
												@Html.Label("Company Name", new { @class = "control-label" })
												<div class="controls">
													<input readonly="readonly" type="text" class="element" name="Graduate.GraduateExperiences[@i].CompanyName" value="@experience.CompanyName" />
												</div>
											</div>
										</div>
										<div class="row-fluid">
											<div class="control-group">
												@Html.Label("Profile", new { @class = "control-label" })
												<div class="controls">
													<input readonly="readonly" type="text" class="element" name="Graduate.GraduateExperiences[@i].CompanyProfile" value="@experience.CompanyProfile" />
												</div>
											</div>
										</div>
										<div class="row-fluid">
											<div class="control-group">
												@Html.Label("Specialisation", new { @class = "control-label" })
												<div class="controls">
													<textarea readonly="readonly" rows="3" class="element input-xxlarge" name="Graduate.GraduateExperiences[@i].Experience">@experience.Experience</textarea>
												</div>
											</div>
										</div>
		   i++;
	   }
									}
								</div>
								<div class="row-fluid">
									<div class="span3">
										<button class="btn btn-inverse btn-mini command add" data-group="experience" data-target="experiences" data-container="add-experience-container">Add another experience</button>
									</div>
								</div>
							</div>
						</div>
					</div>
					<div class="accordion-group">
						<div class="accordion-heading">
							<a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion" href="#other-accordion">Other Links
							</a>
						</div>
						<div id="other-accordion" class="accordion-body collapse">
							<div class="accordion-inner">
								<div class="row-fluid">
									<div class="control-group">
										@Html.LabelFor(_ => _.Graduate.LinkedIn)
										<div class="controls">
											@Html.TextBoxFor(_ => _.Graduate.LinkedIn)
											@Html.ValidationMessageFor(_ => _.Graduate.LinkedIn)
										</div>
									</div>
								</div>
								<div class="row-fluid">
									<div class="control-group">
										@Html.LabelFor(_ => _.Graduate.GooglePlus)
										<div class="controls">
											@Html.TextBoxFor(_ => _.Graduate.GooglePlus)
											@Html.ValidationMessageFor(_ => _.Graduate.GooglePlus)
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>*@
				<input type="submit" class="btn-u" value="Save" />
   }
		</div>
	</div>
</div>

